# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YEihdGKrUeZd5GS1kOog5SZ3FJprBl8a
"""

!pip install vaderSentiment

import requests
import json

import matplotlib.pyplot as plt
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

def get_news_mentions_gdelt(politician_name):
    url = 'https://api.gdeltproject.org/api/v2/doc/doc?query=' + politician_name + '&mode=artlist&format=json&maxrecords=50'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        return data['articles']
    else:
        print(f"Failed to fetch news articles: {response.status_code}")
        return None

def analyze_sentiment_vader(text):
    analyzer = SentimentIntensityAnalyzer()
    sentiment_score = analyzer.polarity_scores(text)
    return sentiment_score

def classify_sentiment_vader(sentiment_score):
    compound = sentiment_score['compound']
    if compound >= 0.1:
        return 'positive'
    elif compound < -0.1:
        return 'negative'
    else:
        return 'neutral'

def create_visualization(positive_count, negative_count, neutral_count):
    total_count = positive_count + negative_count + neutral_count
    if total_count == 0:
        print("No articles to display")
        return

    # Normalize counts to percentages
    positive_percent = positive_count / total_count
    neutral_percent = neutral_count / total_count
    negative_percent = negative_count / total_count

    # Create a horizontal bar chart
    categories = ['Positive', 'Neutral', 'Negative']
    counts = [positive_percent, neutral_percent, negative_percent]
    colors = ['green', 'yellow', 'red']

    plt.barh(categories, counts, color=colors)
    plt.xlabel('Proportion')
    plt.title('Sentiment Analysis Visualization')
    plt.xlim(0, 1)

    # Add text labels
    for i, v in enumerate(counts):
        plt.text(v + 0.01, i, f'{v:.1%}', va='center', color='black')

    # Show plot
    plt.show()

# Example usage
politician_name = input('Enter politician name \n')  # Replace with the name of the politician

positive_count = 0
negative_count = 0
neutral_count = 0

news_data = get_news_mentions_gdelt(politician_name)

if news_data:
    for article in news_data:
        title = article['seendate']
        source = article['domain']
        url = article['url']

        content = article.get('title', '')

        # Perform sentiment analysis using VADER
        sentiment_score = analyze_sentiment_vader(content)
        sentiment = classify_sentiment_vader(sentiment_score)

        # Update sentiment counts
        if sentiment == 'positive':
            positive_count += 1
        elif sentiment == 'negative':
            negative_count += 1
        else:
            neutral_count += 1

        print(f"Title: {title}")
        print(f"Source: {source}")
        print(f"URL: {url}")
        print(f"Sentiment: {sentiment}")
        print("-----\n")

print(f"Positive reviews: {positive_count}")
print(f"Negative reviews: {negative_count}")
print(f"Neutral reviews: {neutral_count}")

# Create and display the visualization
create_visualization(positive_count, negative_count, neutral_count)

# Save the fetched data to a JSON file
with open(f'{politician_name}_news_mentions.json', 'w') as outfile:
    json.dump(news_data, outfile, indent=4)